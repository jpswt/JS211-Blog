QUESTION 1) Describe one thing you're learning in class today. Why do you think it will be important in your future 
web development journey?

Today in class we are learning about object oriented programming.  OOP is a style of programming that breaks a program 
into segments of objects, making them reusable, and can communicate with each other. Each object is defined by its own 
set of properties, which can then be accessed and modified without affecting other program aspects, so it is easier 
to update and modify programs written in object-oriented languages.

As the programs we begin working on become larger in scale, the ability to use this style and break things down into smaller 
sections will definitely become beneficial.  

-----------------------------------------------------------------------------------------------------------------------------------------------------------

QUESTION 2) Can you offer a use case for the new arrow => function syntax?

You can define methods using the arrow function syntax inside classes. Fat arrow methods bind this value to the 
class instance. When the method is invoked, this always equals the class instance, which is useful when the methods 
are used as callbacks.

Also, if the arrow function has one expression, then the expression is returned implicitly, even without using the return keyword.
-----------------------------------------------------------------------------------------------------------------------------------------------------------

QUESTION 3) How does this new syntax differ from the older function signature, function nameFunc(){}, both in style 
and functionality?

function nameFunc(){} - older signature
const nameFunc = () = {} - newer signature

Both arrow functions and regular functions can be used as object methods.

The biggest difference between those 2 functions, and it’s related to how this is bound in a method.

Consider this example:

const car = {
  brand: 'Toyota',
  model: 'Tundra',
  start: function() {
    console.log(`Started ${this.brand} ${this.model}`)
  },
  stop: () => {
    console.log(`Stopped ${this.brand} ${this.model}`)
  }
}
this in the start() method refers to the object itself. But in the stop() method, which is an arrow function, it doesn’t.
this is not bound to the object instance. It points to what this points to in the outer scope. This implies that 
arrow functions are not suitable to be used for object methods when you want to access this.

-----------------------------------------------------------------------------------------------------------------------------------------------------------

QUESTION 4) Explain the differences on the usage of foo between function foo() {} and const foo = function() {}

They happen at different times in the parsing cycle and have different effects.


This is a function declaration:
foo(); -- valid call
function foo() {
    // ...
}


Function declarations are processed upon entry into the enclosing scope, before any step-by-step code is executed.
We can call the function “foo” before or after declaring the function. That means we can declare the function 
wherever we like in our code.

This is a function expression (specifically, an anonymous one):
foo(); --- result in error
var foo = function() {
    // ...
};

foo(); -- declaration after expression is valid

Function expressions are processed as part of the step-by-step code, at the point where they appear (just like any 
other expression).  Because of this processing, we will get an error if we call the function before declaring the function. 

-----------------------------------------------------------------------------------------------------------------------------------------------------------

QUESTION 5) What advantage is there for using the arrow syntax for a method in a constructor?

The main advantage is that the value of "this" gets set at the time of the function creation and can't change after that. 
So, when the constructor is used to create a new object, this will always refer to that object.  Handy when you are passing 
around your arrow function to different parts of your application, you wouldn't have to worry about the context changing.

-----------------------------------------------------------------------------------------------------------------------------------------------------------

QUESTION 6) Can you give an example for destructuring an object or an array?

The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties 
from objects, into distinct variables.

Array destructuring:

const foo = ['one', 'two', 'three'];

const [red, yellow, green] = foo;
console.log(red); // "one"
console.log(yellow); // "two"
console.log(green); // "three"

-----------------------------------------------------------------------------------------------------------------------------------------------------------

QUESTION 7) Explain Closure in your own words. How do you think you can use it? 

Closure is when the inner function still has access to the variable and parameters of the outer function.
An important characteristic of closure is that outer variables can keep their states between multiple calls, while 
inner function does not.  They simply reference the outer variables and the value of the outer variables will be 
changed if you change it using inner function.

Example:

function outerFunc() {

    let outerColor = 'red';

    function innerFunc() {
        console.log(outerColor);
    }

    return innerFunc;
}
let output = outerFunc();

output(); // red

Closure is useful in hiding implementation detail in JavaScript. It can be useful to create private variables or functions
that you do not want the end-user to have access to and can manipulate in way that could break your code or allow for access
to private data.


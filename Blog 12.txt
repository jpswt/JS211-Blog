QUESTION 1) Tell us about something you learned this week.

This week we learned about algorithm.  An algorithm is a set of instructions for solving a problem or accomplishing 
a task.  An example of an algorithm is a recipe, which consists of specific instructions for preparing a meal.  

Computer algorithms make life easier by trimming the time it takes to manually do things. In the world of automation, 
algorithms allow workers to be more proficient and focused. Algorithms make slow processes more proficient.

-----------------------------------------------------------------------------------------------------------------------------------------------------------

QUESTION 2) What are the pros and cons of immutability?

Pros: 
- Easier change detection - Object equality can be determined in a performant and easy manner through referential equality. 
- This is useful for comparing object differences in React and Redux.
- Programs with immutable objects are less complicated to think about, since you don't need to worry about how an object 
may evolve over time.
- Defensive copies are no longer necessary when immutable objects are returning from or passed to functions, since there is 
no possibility an immutable object will be modified by it.
- Easy sharing via references - One copy of an object is just as good as another, so you can cache objects or reuse the 
same object multiple times.
- Thread-safe - Immutable objects can be safely used between threads in a multi-threaded environment since there is no risk 
of them being modified in other concurrently running threads.
- Using libraries like ImmmutableJS, objects are modified using structural sharing and less memory is needed for having 
multiple objects with similar structures.

Cons: 
- Naive implementations of immutable data structures and its operations can result in extremely poor performance because 
new objects are created each time. It is recommended to use libraries for efficient immutable data structures and operations 
that leverage on structural sharing.
- Allocation (and deallocation) of many small objects rather than modifying existing ones can cause a performance impact. 
The complexity of either the allocator or the garbage collector usually depends on the number of objects on the heap.
-Cyclic data structures such as graphs are difficult to build. If you have two objects which can't be modified after initialization, 
how can you get them to point to each other?

-----------------------------------------------------------------------------------------------------------------------------------------------------------

QUESTION 3) How can you achieve immutability in your own code?

By using const declarations combined with the techniques mentioned above for creation. For "mutating" objects, use the spread 
operator, Object.assign, Array.concat(), etc., to create new objects instead of mutate the original object.

-----------------------------------------------------------------------------------------------------------------------------------------------------------

QUESTION 4) What are Divide and Conquer algorithms? Describe how they work. Can you give any common examples of the types of 
problems where this approach might be used?

This technique can be divided into the following three parts:

Divide: This involves dividing the problem into smaller sub-problems.
Conquer: Solve sub-problems by calling recursively until solved.
Combine: Combine the sub-problems to get the final solution of the whole problem.

These algorithms usually take a problem and divide them into subsets of that problem.  Then recursively solves the subsets and then merges 
the subsets back to get the final solution.  An example in which the divide and conquer method is useful would be trying to determine the 
maximum and minimum element in an array.

-----------------------------------------------------------------------------------------------------------------------------------------------------------

QUESTION 5) How do insertion sort, heap sort, quick sort, and merge sort work?

1. Insertion sort is a simple sorting algorithm that works similar to the way you sort playing cards in your hands. The array is 
virtually split into a sorted and an unsorted part. Values from the unsorted part are picked and placed at the correct position 
in the sorted part.

Algorithm 
To sort an array of size n in ascending order: 
1: Iterate from arr[1] to arr[n] over the array. 
2: Compare the current element (key) to its predecessor. 
3: If the key element is smaller than its predecessor, compare it to the elements before. Move the greater elements one position 
up to make space for the swapped element.

2. Heap sort is a comparison-based sorting technique based on Binary Heap data structure. It is similar to selection sort where we 
first find the minimum element and place the minimum element at the beginning. We repeat the same process for the remaining elements.

A Binary Heap is a Complete Binary Tree where items are stored in a special order such that the value in a parent node is greater(or smaller) 
than the values in its two children nodes. The former is called max heap and the latter is called min-heap. The heap can be represented by a 
binary tree or array.

Heap Sort Algorithm for sorting in increasing order: 
1. Build a max heap from the input data. 
2. At this point, the largest item is stored at the root of the heap. Replace it with the last item of the heap followed by reducing the 
size of heap by 1. Finally, heapify the root of the tree. 
3. Repeat step 2 while the size of the heap is greater than 1.

3. QuickSort is a Divide and Conquer algorithm. It picks an element as pivot and partitions the given array around the picked pivot. There are 
many different versions of quickSort that pick pivot in different ways. 

Always pick first element as pivot.
Always pick last element as pivot (implemented below)
Pick a random element as pivot.
Pick median as pivot.

The key process in quickSort is partition(). Target of partitions is, given an array and an element x of array as pivot, put x at its correct 
position in sorted array and put all smaller elements (smaller than x) before x, and put all greater elements (greater than x) after x. All this 
should be done in linear time.

Partition Algorithm 
The logic is simple, we start from the leftmost element and keep track of index of smaller (or equal to) elements as i. While traversing, if we 
find a smaller element, we swap current element with arr[i]. Otherwise we ignore current element. 

4. Merge Sort is a Divide and Conquer algorithm. It divides the input array into two halves, calls itself for the two halves, and then it merges the 
two sorted halves. The merge() function is used for merging two halves. The merge(arr, l, m, r) is a key process that assumes that arr[l..m] and 
arr[m+1..r] are sorted and merges the two sorted sub-arrays into one.

-----------------------------------------------------------------------------------------------------------------------------------------------------------

QUESTION 6) What are the key advantages of insertion sort, quick sort, heap sort and merge sort? Discuss best, average, and 
worst case time and memory complexity.  

Key advantage of the insertion sort is its simplicity and performance when dealing with small lists.  With it being an in-place 
sorting algorithm, the space requirement is minimal. It's worst case is O(n^2), average is O(n) and best case is O(n^2).

Key advantage of quick sort is its efficiency and ability to deal well with large list of items.  It's worst case is O(n^2), 
average is O(n*log(n)) and best case is O(n*log(n)).


Key advantage of heap sort is its ability to sort large number of elements.  This implies no other sorting algorithm can perform better. 
Memory usage is minimal. It's worst case is O(n*log(n)), average is O(n*log(n)) and best case is O(n*log(n)).

Key advantage of merge sort is that it is fast for large arrays of data as it doesn't go through the whole array many times.  It is very
efficient as it can sort in O(n*log(n)) time in best, average and worse case performance.

-----------------------------------------------------------------------------------------------------------------------------------------------------------

QUESTION 7) Explain the difference between mutable and immutable objects.

Mutable objects are objects whose value can change once created, while immutable objects are those whose value cannot change once created. In JavaScript 
numbers, strings, null, undefined and Booleans are primitive types which are immutable. Objects, arrays, functions, classes, maps, and sets are mutable.

Mutable types have individual identities and are compared by reference, that is, variables hold references to objects, or rather they point to the memory 
location of an object. Immutable types donâ€™t have individual identities hence are compared by value, i.e. the value in the variable and not the location 
they are referencing.

-----------------------------------------------------------------------------------------------------------------------------------------------------------

QUESTION 8) What are the three laws of algorithm recursion? Describe them in your own words and what they mean to you. 

1. A recursive algorithm must call itself, recursively.
2. A recursive algorithm must have a base case.
3. A recursive algorithm must change its state and move toward the base case.

In short, the base case is a problem that is usually small enough to solve directly without recursion.  Then, the date is modified in a way the that moves
the algorithm toward the base case and represents the problem getting smaller in some way.  And finally, the algorithm must call itself.  Recursion allows 
us to solve problems by breaking them down into smaller and easier problems.
